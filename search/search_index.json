{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"docker/","title":"Docker","text":""},{"location":"docker/setup/","title":"Installation","text":"MacOSLinux <p>Install <code>colima</code> using Homebrew</p> <pre><code>brew install colima docker docker-buildx docker-compose\n</code></pre> <p>Start colima VM</p> <pre><code>colima start\n</code></pre> <p>Configure Docker APT repo</p> <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\n\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\necho \\\n\"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n    \"$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\" stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> <p>Install Docker</p> <pre><code>sudo apt-get update\nsudo apt-get install \\\ndocker-ce \\\ndocker-ce-cli \\\ndocker-buildx-plugin \\\ndocker-compose-plugin\n</code></pre>"},{"location":"postgresql/setup/","title":"Installation","text":"MacOSLinux <p>Install it using Homebrew</p> <pre><code>brew install postgresql\n</code></pre> <p>Configure PostgreSQL APT repo</p> <pre><code>sudo apt-get install curl ca-certificates gnupg lsb-release\ncurl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg &gt;/dev/null\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\n</code></pre> <p>Install PostgreSQL</p> <pre><code>sudo apt-get update\nsudo apt-get install -y postgresql-16\n</code></pre>"},{"location":"python/base-tools/","title":"Base tools","text":""},{"location":"python/base-tools/#pyenv","title":"pyenv","text":"<p>pyenv is a version manager for Python. It allows to install multiple versions of Python on the same machine. Combined with pyenv-virtualenv plugin, it is also able to manage virtualenvs.</p>"},{"location":"python/base-tools/#install-a-python-version","title":"Install a python version","text":"<pre><code>pyenv install 3.11.2\n</code></pre>"},{"location":"python/base-tools/#activate-a-python-version","title":"Activate a Python version","text":"<pre><code>pyenv shell 3.11.2\n</code></pre>"},{"location":"python/base-tools/#create-a-virtualenv","title":"Create a virtualenv","text":"<pre><code>pyenv virtualenv 3.11.2 dev\n</code></pre>"},{"location":"python/base-tools/#activate-a-virtualenv","title":"Activate a virtualenv","text":"<pre><code>pyenv shell dev\n</code></pre>"},{"location":"python/base-tools/#auto-activate-a-virtualenv","title":"Auto-activate a virtualenv","text":"<p>You can configure auto-activation of <code>dev</code> virtualenv when entering the current directory by using the following command:</p> <pre><code>pyenv local dev\n</code></pre> <p>This will create a <code>.python-version</code> file in your directory with the name of the specified virtualenv. pyenv-virtualenv shell extension will automatically enable the virtualenv  when entering the directory.</p> <p>Tip</p> <p>Installed Python versions and virtualenvs are located in <code>${PYENV_ROOT}/versions</code></p>"},{"location":"python/base-tools/#pipx","title":"pipx","text":"<p>pipx is an application manager for Python. It creates a dedicated virtualenv for each application and adds it to your PATH.</p>"},{"location":"python/base-tools/#install-a-python-application","title":"Install a Python application","text":"<pre><code>pipx install cookiecutter\n</code></pre> <p>Tip</p> <p>Each application is installed in a dedicated virtualenv located in <code>${HOME}/.local/pipx/venvs</code></p>"},{"location":"python/setup/","title":"Installation","text":"<p>To get started with Python, you need to install multiple tools on your system.</p>"},{"location":"python/setup/#pyenv-and-pyenv-virtualenv","title":"pyenv and pyenv-virtualenv","text":"<p>pyenv is a version manager for Python. It allows to install multiple versions of Python on the same machine.</p> <p>pyenv-virtualenv is a plugin for pyenv that helps to manage virtualenv.</p>"},{"location":"python/setup/#installation_1","title":"Installation","text":"MacOSLinuxZsh (zinit) <p>Install it using Homebrew, along with build dependencies</p> <pre><code>brew install openssl readline sqlite3 xz zlib tcl-tk\nbrew install pyenv pyenv-virtualenv\n</code></pre> <p>Configure your shell (bash)</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv virtualenv-init -)\"' &gt;&gt; ~/.bashrc\nexec \"$SHELL\"\n</code></pre> <p>Install build dependencies</p> <pre><code>sudo apt-get update\nsudo apt-get install -y \\\nbuild-essential \\\nlibssl-dev \\\nzlib1g-dev \\\nlibbz2-dev \\\nlibreadline-dev \\\nlibsqlite3-dev \\\ncurl \\\nlibncursesw5-dev \\\nxz-utils \\\ntk-dev \\\nlibxml2-dev \\\nlibxmlsec1-dev \\\nlibffi-dev \\\nliblzma-dev \\\ngit\n</code></pre> <p>Install pyenv and pyenv-virtualenv</p> <pre><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv\ngit clone https://github.com/pyenv/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv\n</code></pre> <p>Configure your shell (bash)</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv virtualenv-init -)\"' &gt;&gt; ~/.bashrc\nexec \"$SHELL\"\n</code></pre> <p>Add the following snippet to your <code>.zshrc</code></p> <pre><code># pyenv\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=$PYENV_ROOT/shims:$PATH\nzinit ice atclone'./libexec/pyenv init - &gt; zpyenv.zsh &amp;&amp; git clone https://github.com/pyenv/pyenv-virtualenv ./plugins/pyenv-virtualenv &amp;&amp; ./libexec/pyenv virtualenv-init - &gt;&gt; zpyenv.zsh' \\\natpull'./libexec/pyenv init - &gt; zpyenv.zsh &amp;&amp; cd ./plugins/pyenv-virtualenv &amp;&amp; git pull &amp;&amp; cd ../.. &amp;&amp; ./libexec/pyenv virtualenv-init - &gt;&gt; zpyenv.zsh' \\\nas'command' pick'bin/pyenv' src\"zpyenv.zsh\" nocompile'!'\nzinit light pyenv/pyenv\nexec \"$SHELL\"\n</code></pre>"},{"location":"python/setup/#pipx","title":"pipx","text":"<p>pipx is an application manager for Python. It creates a dedicated virtualenv for each application and adds it to your PATH.</p> MacOSLinux <p>Install it using Homebrew</p> <pre><code>brew install pipx\n</code></pre> <p>Configure your shell (bash)</p> <pre><code>echo 'export PATH=\"$PATH:$HOME/.local/bin\"' &gt;&gt; ~/.bashrc\nexec \"$SHELL\"\n</code></pre> <p>Install system python</p> <pre><code>sudo apt-get update\nsudo apt-get install -y python3 python3-pip python3-venv\n</code></pre> <p>Install it using <code>pip</code> in user mode</p> <pre><code>pip install --user pipx\n</code></pre> <p>Configure your shell (bash)</p> <pre><code>echo 'export PATH=\"$PATH:$HOME/.local/bin\"' &gt;&gt; ~/.bashrc\nexec \"$SHELL\"\n</code></pre>"},{"location":"python/setup/#poetry","title":"poetry","text":"<p>poetry is a package manager for Python. </p> <p>Install it using pipx</p> <pre><code>pipx install poetry\n</code></pre>"},{"location":"python/setup/#pip-tools","title":"pip-tools","text":"<p>pip-tools is a lightweight alternative to poetry  for small projects and simple use cases.</p> <p>Install it using pipx</p> <pre><code>pipx install pip-tools\n</code></pre>"}]}